All scripts you can see this: https://github.com/AlexandrZhytenko/taskCoreValue
Results of the task:
Open 'graph.png' file where you can see the input graph.
At first I started using standard tools:
It's from 'networkx' library, so I have this results from networkx_tools.py file:
	Is there path from start to finish: True
	Available probable paths:
	['start', '1', '2', '7', '6', 'finish']
	['start', '1', '2', '8', '7', '6', 'finish']
	['start', '1', '4', '5', 'finish']
	['start', '2', '1', '4', '5', 'finish']
	['start', '2', '7', '6', 'finish']
	['start', '2', '8', '7', '6', 'finish']
	The shortest path length is: 4 step
	The shortest_path: ['start', '1', '4', '5', 'finish']
	All shortest paths are: [['start', '1', '4', '5', 'finish'], ['start', '2', '7', '6', 'finish']]
Time execute is
	For find the shortest path (shortest_paths_generic_shortest_path()) => 0.000000513185269 sec
	For find all shortest paths (shortest_paths_generic_all_shortest_paths()) => 0.000000000000000 sec
For the next step I thought about some simple solutions.
First opinion:
	The function defines the path between two nodes. It takes a graph G from draw_graph.py file,
	the start and end nodes as arguments. Returns the list of nodes
	(including the beginning and ending nodes) that are included in the search path.
	If no path can be found, it returns None.
	The same node will enter no more than once in the return path.
	So I have this results from simple_solution.py file:
		Available probable paths:
	['start', '1', '2', '7', '6', 'finish']
	['start', '1', '2', '8', '7', '6', 'finish']
	['start', '1', '4', '5', 'finish']
	['start', '2', '1', '4', '5', 'finish']
	['start', '2', '7', '6', 'finish']
	['start', '2', '8', '7', '6', 'finish']
	The shortest path length is: 4 step
	The shortest_path: ['start', '1', '4', '5', 'finish']
	All shortest paths are: [['start', '1', '4', '5', 'finish'], ['start', '2', '7', '6', 'finish']]
Time execute is
	For find the shortest path (find_shortest_path()) => 0.000000513185269 sec
	For find all shortest paths (find_all_shortest_paths()) => 0.000000513185269 sec
Differences: 
	For find the shortest path functions) => 0.000000513185269 sec
	For find all shortest paths functions => -0.000000000000000 sec
	Thank you for interesting task!